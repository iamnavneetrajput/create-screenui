{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/navneet/Desktop/layout/src/components/layout/theme-provider.tsx"],"sourcesContent":["'use client';\n\nimport { ThemeProvider as NextThemesProvider } from 'next-themes';\nimport { ReactNode } from 'react';\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  return (\n    <NextThemesProvider \n      attribute=\"data-theme\"  // This will add data-theme=\"light\" or \"dark\" to <html>\n      defaultTheme=\"system\"      // Set default theme (can be \"light\" or \"dark\")\n      enableSystem={true}      // Optionally enables system-level theme detection\n    >\n      {children}\n    </NextThemesProvider>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AASO,SAAS,cAAc,EAAE,QAAQ,EAAsB;IAC5D,qBACE,8OAAC,gJAAA,CAAA,gBAAkB;QACjB,WAAU,aAAc,uDAAuD;;QAC/E,cAAa,SAAc,+CAA+C;;QAC1E,cAAc;kBAEb;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///home/navneet/Desktop/layout/src/hooks/ErrorBoundary.tsx"],"sourcesContent":["\"use client\";\n// ErrorBoundary.tsx\nimport React, { Component, ReactNode } from 'react';\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, info: React.ErrorInfo) {\n    console.error('Error caught in error boundary:', error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <div>Something went wrong. Please try again later.</div>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n"],"names":[],"mappings":";;;;AACA,oBAAoB;AACpB;AAFA;;;AAYA,MAAM,sBAAsB,qMAAA,CAAA,YAAS;IACnC,YAAY,KAAyB,CAAE;QACrC,KAAK,CAAC;QACN,IAAI,CAAC,KAAK,GAAG;YAAE,UAAU;QAAM;IACjC;IAEA,OAAO,2BAA2B;QAChC,OAAO;YAAE,UAAU;QAAK;IAC1B;IAEA,kBAAkB,KAAY,EAAE,IAAqB,EAAE;QACrD,QAAQ,KAAK,CAAC,mCAAmC,OAAO;IAC1D;IAEA,SAAS;QACP,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACvB,qBAAO,8OAAC;0BAAI;;;;;;QACd;QAEA,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ;IAC5B;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///home/navneet/Desktop/layout/src/components/layout/wrapper/SettingWrapper.tsx"],"sourcesContent":["'use client';\n\nimport dynamic from 'next/dynamic';\n\n// Dynamically import DevPanel for client-side rendering only\nconst DevPanelLazy = dynamic(() => import('../setting'), { ssr: false });\n\nexport default function DevPanelWrapper() {\n  return <DevPanelLazy />;\n}\n"],"names":[],"mappings":";;;;AAEA;;AAFA;;;AAIA,6DAA6D;AAC7D,MAAM,eAAe,CAAA,GAAA,+JAAA,CAAA,UAAO,AAAD;;;;;;IAAgC,KAAK;;AAEjD,SAAS;IACtB,qBAAO,8OAAC;;;;;AACV","debugId":null}}]
}